import {createSlice, PayloadAction, Slice} from '@reduxjs/toolkit';import {IUser} from "../../models/IUser";import {createAsyncThunk} from "@reduxjs/toolkit";import {createUserWithEmailAndPassword, getAuth} from "firebase/auth";import {app} from "../../firebase";import {User} from "@firebase/auth-types";interface AuthState {  role: 'root' | 'user' | null,  isAuth: boolean,  token: string | null,  user: IUser,  error: string | null}const initialState: AuthState = {  role: null,  isAuth: false,  token: null,  error: null,  user: {    email: '',    name: '',    password: ''  },};const auth = getAuth(app)export const registerUser = createAsyncThunk(  'auth/registerUser',  async (userData: IUser) => {    const {user}: User = createUserWithEmailAndPassword(auth, userData.email, userData.password)    return user  })export const authSlice: Slice<AuthState> = createSlice({  name: 'auth',  initialState,  reducers: {    userLogin: (state, action: PayloadAction<IUser>) => {            },        userRegister: (state, action: PayloadAction<IUser>) => {      state.user = action.payload    },        userRegisterSuccess: (state, action: PayloadAction<string>) => {      state.isAuth = true      state.token = action.payload    },        userRegisterError: (state, action: PayloadAction<string>) => {      state.isAuth = false      state.error = action.payload      state.token = null    }  },    extraReducers: (builder) => {    builder      .addCase(registerUser.pending, (state, action: PayloadAction<IUser>) => {          state.user = action.payload                      })      .addCase(registerUser.fulfilled, (state, action: PayloadAction<IUser>) => {        state.isAuth = true        console.log(action.payload)              })      .addCase(registerUser.rejected, () => {            })      }});export const {  userRegister,  userRegisterSuccess,  userRegisterError,} = authSlice.actions;