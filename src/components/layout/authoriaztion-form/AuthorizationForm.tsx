import * as React from 'react'import {Button, Input, Link} from "@skbkontur/react-ui";import {Buttons, LoginFormWrapper} from "./styles";import {registerUser} from "../../../store/action-creators/user-register";import {useDispatch} from "react-redux";import {IUser} from "../../../models/IUser";import {useEffect, useState} from "react";import {useAppSelector} from "../../../store/hooks";import Validator from "../../tools/validator/Validator";type userInfo = IUser & {  'confirm-password'?: '',}const initAuthState: userInfo = {  name: '',  password: '',  email: '',  'confirm-password': ''}interface AuthorizationFormTypes {  isLogin: boolean,  onClick: () => void}const AuthorizationForm: React.FC<AuthorizationFormTypes> = ({isLogin, onClick}) => {  const dispatch = useDispatch()  const authState = useAppSelector(state => state.auth)    const [user, setUser] = useState<userInfo>(initAuthState)      useEffect(() => {    authState.isAuth ? setUser(initAuthState) : setUser(authState.user)  }, [authState.isAuth])      const changeHandler = (evt) => setUser({...user, [evt.target.name]: evt.target.value})          const [validInputs, setValidInputs] = useState({})    const submitHandler = (evt) => {    evt.preventDefault()    // if (isValid) {    //   dispatch(registerUser(user))    // }  }      return (    <LoginFormWrapper action="/" method='post'>      {!isLogin &&        <Input            onChange={changeHandler}            type='text'            name='name'            width={'auto'}            placeholder='Введите псевдоним'        />      }      <Validator        onError={(inputName) => {          setValidInputs({            ...validInputs,            [inputName]: true          })        }}        checkedValue={user.email}        settings={{          minInputLength: {            errorMessage: 'Минимум: 5 символов',            value: 5          },          email: {            errorMessage: 'Введен некорректный email'          }        }}      >      <Input        onChange={changeHandler}        type='email'        name='email'        width={'auto'}        placeholder='Введите email'        error={Object.keys(validInputs).some((key) => validInputs['email'])}      />      </Validator>        <Validator        onError={(inputName) => {          setValidInputs({            ...validInputs,            [inputName]: true          })        }}        checkedValue={user.password}        settings={{          minInputLength: {            errorMessage: 'Минимум: 6 символов',            value: 6          }        }}      >            <Input        onChange={changeHandler}        type='password'        name='password'        width={'auto'}        placeholder='Введите пароль'        error={Object.keys(validInputs).some((key) => validInputs['password'])}      />      </Validator>      {        !isLogin &&          <Input              onChange={changeHandler}              type='password'              name='password-confirm'              width={'auto'}              placeholder='Повторите пароль'          />      }      <Buttons>        <Button type="submit" onClick={submitHandler}>{isLogin ? 'Войти' : 'Подтвердить'}</Button>        <Link onClick={onClick}>{isLogin ? 'Зарегистрироваться' : 'Войти'}</Link>      </Buttons>    </LoginFormWrapper>  )}export default React.memo(AuthorizationForm)