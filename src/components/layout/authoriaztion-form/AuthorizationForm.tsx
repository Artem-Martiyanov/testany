import * as React from 'react'import {Button, Input, Link} from '@skbkontur/react-ui'import {Buttons, InputTitle, LoginFormWrapper} from './styles'import {useDispatch} from 'react-redux'import {IUser} from '../../../models/IUser'import {useEffect, useState} from 'react'import {useAppSelector} from '../../../store/hooks'import Validator from '../../tools/validator/Validator'import {  getConfirmPasswordMessage,  getEmailMessage,  getLoginMessage,  getPasswordMessage,  getTranslatedMessage,} from './validate'import {authUser} from '../../../store/action-creators/user-auth'type inputsType = IUser & {  confirm?: ''}interface AuthorizationFormTypes {  isLogin: boolean,  onClick: () => void}const AuthorizationForm: React.FC<AuthorizationFormTypes> = ({isLogin, onClick}) => {  const dispatch = useDispatch()  const authState = useAppSelector(state => state.auth)    useEffect(() => {    setErrorMessages({      ...errorMessages,      email: getTranslatedMessage(authState.error).email,      password: getTranslatedMessage(authState.error).password,    })  }, [authState.error])    useEffect(() => setErrorMessages(initErrorMessages), [isLogin])    const [user, setUser] = useState<inputsType>(initAuthState)  const [errorMessages, setErrorMessages] = useState<inputsType>(initErrorMessages)  const changeHandler = (evt) => setUser({...user, [evt.target.name]: evt.target.value})  const submitHandler = (evt) => {    evt.preventDefault()    const isAllValid = (messagesArray) => messagesArray.every((message => !message.length))        const currentErrorMessages = {      email: getEmailMessage(user.email),      password: getPasswordMessage(user.password),      name: getLoginMessage(user.name),      confirm: getConfirmPasswordMessage(user.password, user.confirm),    }        setErrorMessages(currentErrorMessages)        const validationArray = isLogin        ? [currentErrorMessages.email, currentErrorMessages.password]        : Object.values(currentErrorMessages)        if (isAllValid(validationArray)) {      dispatch(authUser(user, isLogin ? 'login' : 'register'))    }  }    const inputSettings = (name: string, type: string, placeholder: string) => ({    type,    name,    placeholder,    onChange: changeHandler,    width: 'auto',    error: errorMessages[name].length > 0,  })    return (      <LoginFormWrapper action="/" method="post">        {!isLogin &&            <div>              <InputTitle>Псевдоним</InputTitle>              <Validator message={errorMessages.name}>                <Input {...inputSettings('name', 'text', 'Введите псевдоним')}/>              </Validator>            </div>        }        <div>          <InputTitle>Email</InputTitle>          <Validator message={errorMessages.email}>            <Input {...inputSettings('email', 'email', 'Введите email')}/>          </Validator>        </div>        <div>          <InputTitle>Пароль</InputTitle>          <Validator message={errorMessages.password}>            <Input {...inputSettings('password', 'password', 'Введите пароль')}/>          </Validator>        </div>        {            !isLogin &&            <div>              <InputTitle>Подтвердите пароль</InputTitle>              <Validator message={errorMessages.confirm}>                <Input {...inputSettings('confirm', 'password', 'Повторите пароль')}/>              </Validator>            </div>        }        <Buttons>          <Button type="submit" onClick={submitHandler}>{isLogin ? 'Войти' : 'Подтвердить'}</Button>          <Link onClick={onClick}>{isLogin ? 'Зарегистрироваться' : 'Войти'}</Link>        </Buttons>      </LoginFormWrapper>  )}export default React.memo(AuthorizationForm)