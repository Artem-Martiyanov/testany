import * as React from 'react'import {ValidatorMessage, ValidatorMessageWrapper, ValidatorWrapper} from "./styles";import {ReactElement, useEffect, useState} from "react";import {checkFunctions} from "./validate-functions";type settingFiled = {  errorMessage: string}type settingsTypes = {  email?: settingFiled,  minInputLength?: settingFiled & {    value: number  },  customValidation?: settingFiled & {    handler: () => {}  }}interface ValidatorProps {  settings?: settingsTypes,  onError: (name: string) => void,  checkedValue: string,  children: ReactElement}const Validator: React.FC<ValidatorProps> = ({children, onError, checkedValue, settings}) => {  const [errorMessage, setErrorMessage] = useState('')    useEffect(() => {    if (Object.keys(settings).length > 0) {      Object.keys(settings).forEach(key => {        setErrorMessage(          checkFunctions[key](checkedValue, settings[key]?.value)            ? '' :            settings[key].errorMessage)      })            if (errorMessage.length >= 0) {        onErrorHandler()      }    }  }, [checkedValue]);    const onErrorHandler = () => {    onError(children.props.name)  }    return (    <ValidatorWrapper>      {children}      <ValidatorMessageWrapper $isActive={errorMessage !== ''}>        <ValidatorMessage>{errorMessage}</ValidatorMessage>      </ValidatorMessageWrapper>    </ValidatorWrapper>  )}export default React.memo(Validator)